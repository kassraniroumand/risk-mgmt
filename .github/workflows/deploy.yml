name: Build ARM64 Image and Deploy to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_FAMILY: ${{ secrets.ECS_TASK_FAMILY }}

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for ARM emulation
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Define image URI
        id: image-uri
        run: |
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push ARM64 Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: |
            ${{ env.IMAGE_URI }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

#      - name: Prepare new ECS task definition
#        run: |
#          sed "s|REPLACE_IMAGE_URI|${{ env.IMAGE_URI }}|" ecs-task-def.json > new-task-def.json
#
#      - name: Register new ECS task definition
#        id: register-task
#        run: |
#          TASK_DEF_ARN=$(aws ecs register-task-definition \
#            --cli-input-json file://new-task-def.json \
#            --query 'taskDefinition.taskDefinitionArn' \
#            --output text)
#          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
#          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
#
#      - name: Deploy new revision to ECS service
#        run: |
#          aws ecs update-service \
#            --cluster $ECS_CLUSTER \
#            --service $ECS_SERVICE \
#            --task-definition ${{ steps.register-task.outputs.TASK_DEF_ARN }} \
#            --force-new-deployment
